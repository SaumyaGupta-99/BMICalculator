"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exitLog = void 0;
/**
 * Class containing methods to extract the route insights and set logger to log the insights
 *
 * @class ExitLogger
 * @implements {IExitLogger}
 */
class ExitLogger {
    constructor() {
        /**
         * The default logger invoked if not custom logger is set
         *
         * @private
         * @type {LoggerCallback}
         * @param data route insights containing IP, entry/ exit timestamp, request method, statusCode and route response time
         * @param req Express request object
         * @param res Express response object
         * @memberof ExitLogger
         */
        this.defaultLogger = (data, req, res) => {
            console.log(`${data.timestamp} - ${data.ip} - ${data.method} - ${data.route} - ${data.statusCode} - ${data.responseTime}`);
        };
        /**
         * Extract xForwardedIP from express request object
         *
         * @private
         * @param req Express request object
         * @memberof ExitLogger
         */
        this.getXForwardedIP = (req) => {
            const xForwardedHeader = req.headers['x-forwarded-for'];
            if (xForwardedHeader === undefined)
                return undefined;
            else if (typeof xForwardedHeader === 'string') {
                const forwardedIP = xForwardedHeader.split(',').pop();
                return forwardedIP;
            }
            else
                return undefined;
        };
        /**
         * Extract IP address from Express request object
         * @private
         * @param req Express request object
         * @memberof ExitLogger
         */
        this.getIP = (req) => {
            var _a, _b;
            return (this.getXForwardedIP(req) || req.ip || ((_a = req.socket) === null || _a === void 0 ? void 0 : _a.remoteAddress) || ((_b = req.connection) === null || _b === void 0 ? void 0 : _b.remoteAddress) || undefined);
        };
        /**
         * Set custom logger to log route insights
         * @param loggerFunction Logging function to log route insights
         * @memberof ExitLogger
         */
        this.setLogger = (loggerFunction) => {
            this.logger = loggerFunction;
        };
        /**
         * Custom express middleware to log route insights when route execution finishes
         * @param req Express request object
         * @param res Express response object
         * @param next Express next function
         * @type {IMiddleware}
         * @memberof ExitLogger
         */
        this.middleware = (req, res, next) => {
            const enterDate = new Date();
            const IP = this.getIP(req);
            const route = req.url;
            const method = req.method;
            const that = this;
            res.on('finish', () => {
                const exitDate = new Date();
                const responseTime = exitDate.getTime() - enterDate.getTime();
                const statusCode = res.statusCode;
                const log = {
                    rawEnterDate: enterDate,
                    rawExitDate: exitDate,
                    responseTime,
                    ip: IP,
                    route,
                    statusCode,
                    method,
                    timestamp: exitDate.toDateString(),
                };
                that.logger(log, req, res);
            });
            next();
        };
        this.logger = this.defaultLogger;
        this.middleware = this.middleware.bind(this);
    }
}
const exitLogInstance = new ExitLogger();
exports.exitLog = exitLogInstance;
exports.default = exitLogInstance;

import { Request, Response, NextFunction } from 'express';
declare type exitData = {
    /**
     * Date when request entered the route
     *
     * @type {Date}
     */
    rawEnterDate: Date;
    /**
     * Date when request finished route execution
     *
     * @type {Date}
     */
    rawExitDate: Date;
    /**
     * Timestamp when route finished execution
     *
     * @type {string}
     */
    timestamp: string;
    /**
     * Response status code
     *
     * @type {number}
     */
    statusCode: number;
    /**
     * Route accessed
     *
     * @type {string}
     */
    route: string;
    /**
     * IP address of the request
     *
     * @type {(string | undefined)}
     */
    ip: string | undefined;
    /**
     * Time taken in millisecond to finish route execution
     *
     * @type {number}
     */
    responseTime: number;
    /**
     * Request method to access the endpoint
     *
     * @type {string}
     */
    method: string;
};
declare type IMiddleware = (req: Request, res: Response, next: NextFunction) => void;
export declare type LoggerCallback = (data: exitData, req?: Request, res?: Response) => void;
interface IExitLogger {
    setLogger: (loggerFunction: LoggerCallback) => void;
    middleware: IMiddleware;
}
/**
 * Class containing methods to extract the route insights and set logger to log the insights
 *
 * @class ExitLogger
 * @implements {IExitLogger}
 */
declare class ExitLogger implements IExitLogger {
    /**
     * Logger function invoked with data, req and res
     *
     * @private
     * @type {LoggerCallback}
     * @memberof ExitLogger
     */
    private logger;
    constructor();
    /**
     * The default logger invoked if not custom logger is set
     *
     * @private
     * @type {LoggerCallback}
     * @param data route insights containing IP, entry/ exit timestamp, request method, statusCode and route response time
     * @param req Express request object
     * @param res Express response object
     * @memberof ExitLogger
     */
    private defaultLogger;
    /**
     * Extract xForwardedIP from express request object
     *
     * @private
     * @param req Express request object
     * @memberof ExitLogger
     */
    private readonly getXForwardedIP;
    /**
     * Extract IP address from Express request object
     * @private
     * @param req Express request object
     * @memberof ExitLogger
     */
    private getIP;
    /**
     * Set custom logger to log route insights
     * @param loggerFunction Logging function to log route insights
     * @memberof ExitLogger
     */
    setLogger: (loggerFunction: LoggerCallback) => void;
    /**
     * Custom express middleware to log route insights when route execution finishes
     * @param req Express request object
     * @param res Express response object
     * @param next Express next function
     * @type {IMiddleware}
     * @memberof ExitLogger
     */
    middleware: IMiddleware;
}
declare const exitLogInstance: ExitLogger;
export declare const exitLog: ExitLogger;
export default exitLogInstance;
